import streamlit as st
from dotenv import load_dotenv
load_dotenv()        # LOAD ALL THE ENVIRONMENT VARIABLES
import os
import google.generativeai as genai

from youtube_transcript_api import YouTubeTranscriptApi


genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

prompt = """ You are Youtube summarizer. You will be taking the transcript test and summerizing the entire video and providing the important summary in points. Please provide the summary of the text given here : """ 



# This function is used to extract the transcript text from a given YouTube video URL.
# It leverages the YoutubeTranscriptApi library to fetch the transcript data.
def extract_transcript_details(youtube_video_url):

    try:
        # The input URL is expected to be in the format "https://www.youtube.com/watch?v=VIDEO_ID".
        # This line extracts the VIDEO_ID from the URL.
        video_id = youtube_video_url.split("=")[1]
        print(video_id)

        # Fetches the transcript data for the given video_id.
        # The get_transcript() function returns a list of dictionaries, where each dictionary contains
        # the text of a transcript entry along with its start and end timestamps.
        transcript_text = YouTubeTranscriptApi.get_transcript(video_id)

        # Initialize an empty string to store the combined transcript text.
        transcript = ""

        # Iterate through each entry in the transcript_text list.
        for i in transcript_text:

            # Concatenate the text of each entry to the transcript string,
            # separated by a space to maintain proper word spacing.
            transcript += " " + i["text"]

        # Return the final transcript text string.
        return transcript

# Note: The function does not handle any exceptions that might occur during the execution.
# It is recommended to handle exceptions and return appropriate error messages.
    
    except Exception as e:
        raise e


# This function generates content using the Gemini-pro model from genai.
# The function takes two arguments: transcript_text and prompt.
# transcript_text is the text that will be used as input for the model.
# prompt is the prompt that will be given to the model before the input text.
# The function returns the response generated by the model.
def generate_gemini_content(transcript_text, prompt=""):
    # Initialize the GenerativeModel object from genai, using the Gemini-pro model.

    model = genai.GenerativeModel("gemini-pro")
    
    # Generate content using the model and the given prompt and input text.
    # The generated content is stored in the response variable.
    response = model.generate_content(prompt + transcript_text)
    
    # Return the generated response.
    return response.text




st.title("Youtube Transcript to detailed notes converter(for short videos)")
youtube_link = st.text_input("Enter Youtube Video Link:")

if youtube_link:
    video_id = youtube_link.split("=")[1]
    st.image(f"http://img.youtube.com/vi/{video_id}/0.jpg",use_column_width=True)

if st.button("Get Detailed Notes"):
    transcript_text = extract_transcript_details(youtube_link)

    if transcript_text:
        summary = generate_gemini_content(transcript_text,prompt)
        st.markdown("## Detailed Notes")
        st.write(summary)